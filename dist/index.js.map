{"version":3,"sources":["../src/bin.ts","../src/index.ts"],"sourcesContent":["#!/usr/bin/env node\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { bold, cyan, gray, green, red } from \"kleur/colors\";\r\nimport prompts from \"prompts\";\r\n\r\nimport { create } from \"src/index\";\r\nimport { dist, getUserPkgManager } from \"src/utils\";\r\nimport type { Options } from \"src/types\";\r\n\r\nconst { version } = JSON.parse(fs.readFileSync(new URL(\"../package.json\", import.meta.url), \"utf-8\")) as { version: string };\r\nconst packageManager = getUserPkgManager();\r\n\r\nconst main = async () => {\r\n  console.log(gray(`create-t3svelte-app version ${version} run with ${packageManager}`));\r\n  console.log(`\\n${bold(cyan(\"Welcome to \") + red(\"Create-T3Svelte-App\"))}\\n`);\r\n\r\n  let cwd = process.argv[2] || \".\";\r\n\r\n  if (cwd === \".\") {\r\n    const opts = await prompts(\r\n      [\r\n        {\r\n          type: \"text\",\r\n          name: \"dir\",\r\n          message: \"What do you want to call the project?\",\r\n        },\r\n      ],\r\n      { onCancel: () => process.exit(1) },\r\n    );\r\n\r\n    if (opts.dir) {\r\n      cwd = opts.dir;\r\n    }\r\n  }\r\n\r\n  if (fs.existsSync(cwd)) {\r\n    if (fs.readdirSync(cwd).length > 0) {\r\n      const response = await prompts({\r\n        type: \"confirm\",\r\n        name: \"value\",\r\n        message: \"Directory not empty. Continue?\",\r\n        initial: false,\r\n      });\r\n\r\n      if (!response.value) {\r\n        process.exit(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  type Answers = {\r\n    template: Options[\"template\"];\r\n    addons: Array<\"eslint\" | \"prettier\">;\r\n    packages: Array<\"prisma\" | \"trpc\" | \"tailwind\" | \"auth\">;\r\n  };\r\n\r\n  const answers: Answers = await prompts(\r\n    [\r\n      {\r\n        type: \"select\",\r\n        name: \"template\",\r\n        message: \"What template would you like to use?\",\r\n        choices: fs.readdirSync(dist(\"templates\")).flatMap((dir) => {\r\n          if (!fs.lstatSync(dist(`templates/${dir}`)).isDirectory()) return [];\r\n\r\n          const meta_file = dist(`templates/${dir}/meta.json`);\r\n          const { title, description } = JSON.parse(fs.readFileSync(meta_file, \"utf8\"));\r\n\r\n          return {\r\n            title,\r\n            description,\r\n            value: dir,\r\n          };\r\n        }),\r\n      },\r\n      {\r\n        type: \"multiselect\",\r\n        name: \"packages\",\r\n        message: \"What packages would you like to enable?\",\r\n        choices: [\r\n          { title: \"tRPC\", value: \"trpc\", selected: true },\r\n          { title: \"Prisma\", value: \"prisma\", selected: true },\r\n          { title: \"Tailwind\", value: \"tailwind\", selected: true },\r\n          { title: \"Auth\", value: \"auth\", selected: true },\r\n        ],\r\n      },\r\n      {\r\n        type: \"multiselect\",\r\n        name: \"addons\",\r\n        message: \"What additional tooling do you like to enable?\",\r\n        choices: [\r\n          { title: \"ESLint\", value: \"eslint\", selected: true },\r\n          { title: \"Prettier\", value: \"prettier\", selected: true },\r\n        ],\r\n      },\r\n    ],\r\n    {\r\n      onCancel: () => {\r\n        process.exit(1);\r\n      },\r\n    },\r\n  );\r\n\r\n  const options: Options = {\r\n    ...answers,\r\n    name: path.basename(path.resolve(cwd)),\r\n    addons: answers.addons,\r\n    packages: answers.packages,\r\n  };\r\n\r\n  await create(cwd, options);\r\n\r\n  console.log(bold(green(\"\\nYour project is ready!\")));\r\n\r\n  console.log(bold(\"✔ Typescript\"));\r\n  console.log('  Inside Svelte components, use <script lang=\"ts\">');\r\n\r\n  if (options.packages.includes(\"trpc\")) {\r\n    console.log(bold(\"✔ tRPC\"));\r\n    console.log(cyan(\"  https://trpc.io/docs\"));\r\n  }\r\n\r\n  if (options.packages.includes(\"prisma\")) {\r\n    console.log(bold(\"✔ Prisma\"));\r\n    console.log(cyan(\"  https://www.prisma.io/docs\"));\r\n  }\r\n\r\n  if (options.packages.includes(\"tailwind\")) {\r\n    console.log(bold(\"✔ Tailwind\"));\r\n    console.log(cyan(\"  https://tailwindcss.com/docs\"));\r\n  }\r\n\r\n  if (options.packages.includes(\"auth\")) {\r\n    console.log(bold(\"✔ Auth\"));\r\n    console.log(cyan(\"  https://authjs.dev/\"));\r\n  }\r\n\r\n  if (options.addons.includes(\"eslint\")) {\r\n    console.log(bold(\"✔ ESLint\"));\r\n    console.log(cyan(\"  https://eslint.org/docs/latest\"));\r\n  }\r\n\r\n  if (options.addons.includes(\"prettier\")) {\r\n    console.log(bold(\"✔ Prettier\"));\r\n    console.log(cyan(\"  https://prettier.io/docs/en/index.html\"));\r\n  }\r\n\r\n  console.log(\"\\nNext steps:\");\r\n  let i = 1;\r\n\r\n  const relative = path.relative(process.cwd(), cwd);\r\n  if (relative !== \"\") {\r\n    console.log(`  ${i++}: ${bold(cyan(`cd ${relative}`))}`);\r\n  }\r\n\r\n  console.log(`  ${i++}: ${bold(cyan(`${packageManager} install`))}`);\r\n  if (options.packages.includes(\"prisma\")) {\r\n    console.log(`  ${i++}: ${bold(cyan(`${packageManager} run db-push`))} (optional - sync a database schema)`);\r\n  }\r\n  console.log(`  ${i++}: ${bold(cyan(`${packageManager} run sync`))} (optional - sync the enviroment variables)`);\r\n  console.log(`  ${i++}: ${bold(cyan(`${packageManager} run dev`))}`);\r\n\r\n  console.log(`\\nTo close the dev server, hit ${bold(cyan(\"Ctrl-C\"))}`);\r\n  console.log(`Stuck? Visit the official svelte website at ${cyan(\"https://svelte.dev/chat\")}\\n`);\r\n};\r\n\r\nmain();\r\n","import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport { mkdirp, copy, dist } from \"src/utils\";\r\nimport type { Common, Condition, File, Options } from \"src/types\";\r\n\r\nexport const create = async (cwd: string, options: Options) => {\r\n  mkdirp(cwd);\r\n\r\n  write_template_files(options.template, options.name, cwd);\r\n  write_common_files(cwd, options, options.name);\r\n};\r\n\r\nfunction write_template_files(template: string, name: string, cwd: string) {\r\n  const dir = dist(`templates/${template}`);\r\n  copy(`${dir}/assets`, cwd, (name) => name.replace(\"DOT-\", \".\"));\r\n  copy(`${dir}/package.json`, `${cwd}/package.json`);\r\n\r\n  const manifest = `${dir}/files.types=typescript.json`;\r\n  const files: File[] = JSON.parse(fs.readFileSync(manifest, \"utf-8\"));\r\n\r\n  files.forEach((file) => {\r\n    const dest = path.join(cwd, file.name);\r\n    mkdirp(path.dirname(dest));\r\n\r\n    fs.writeFileSync(dest, file.contents.replace(/~TODO~/g, name));\r\n  });\r\n}\r\n\r\nfunction write_common_files(cwd: string, options: Options, name: string) {\r\n  const shared = dist(\"templates/shared.json\");\r\n  const { files }: Common = JSON.parse(fs.readFileSync(shared, \"utf-8\"));\r\n\r\n  const pkg_file = path.join(cwd, \"package.json\");\r\n  const pkg = JSON.parse(fs.readFileSync(pkg_file, \"utf-8\"));\r\n\r\n  sort_files(files).forEach((file) => {\r\n    const include = file.include.every((condition) => matches_condition(condition, options));\r\n    const exclude = file.exclude.some((condition) => matches_condition(condition, options));\r\n\r\n    if (exclude || !include) return;\r\n\r\n    if (file.name === \"package.json\") {\r\n      const new_pkg = JSON.parse(file.contents);\r\n      merge(pkg, new_pkg);\r\n    } else {\r\n      const dest = path.join(cwd, file.name);\r\n      mkdirp(path.dirname(dest));\r\n      fs.writeFileSync(dest, file.contents);\r\n    }\r\n  });\r\n\r\n  pkg.dependencies = sort_keys(pkg.dependencies);\r\n  pkg.devDependencies = sort_keys(pkg.devDependencies);\r\n  pkg.name = to_valid_package_name(name);\r\n\r\n  fs.writeFileSync(pkg_file, JSON.stringify(pkg, null, \"\\t\") + \"\\n\");\r\n}\r\n\r\n/**\r\n * @param {import('./types/internal').Condition} condition\r\n * @param {import('./types/internal').Options} options\r\n * @returns {boolean}\r\n */\r\nconst matches_condition = (condition: Condition, options: Options) => {\r\n  if (condition === \"default\") {\r\n    return options.template === condition;\r\n  }\r\n  if (condition === \"eslint\" || condition === \"prettier\") {\r\n    return options.addons.includes(condition);\r\n  }\r\n  if (condition === \"prisma\" || condition === \"trpc\" || condition === \"tailwind\" || condition === \"auth\") {\r\n    return options.packages.includes(condition);\r\n  }\r\n  return options[condition];\r\n};\r\n\r\nconst merge = (target: any, source: any) => {\r\n  for (const key in source) {\r\n    if (key in target) {\r\n      const target_value = target[key];\r\n      const source_value = source[key];\r\n\r\n      if (typeof source_value !== typeof target_value || Array.isArray(source_value) !== Array.isArray(target_value)) {\r\n        throw new Error(\"Mismatched values\");\r\n      }\r\n\r\n      if (typeof source_value === \"object\") {\r\n        merge(target_value, source_value);\r\n      } else {\r\n        target[key] = source_value;\r\n      }\r\n    } else {\r\n      target[key] = source[key];\r\n    }\r\n  }\r\n};\r\n\r\nconst sort_keys = (obj: Record<string, any>) => {\r\n  if (!obj) return;\r\n\r\n  const sorted: typeof obj = {};\r\n  Object.keys(obj)\r\n    .sort()\r\n    .forEach((key) => {\r\n      sorted[key] = obj[key];\r\n    });\r\n\r\n  return sorted;\r\n};\r\n\r\n/**\r\n * Sort files so that those which apply more generically come first so they\r\n * can be overwritten by files for more precise cases later.\r\n *\r\n * @param files {import('./types/internal').Common['files']}\r\n *  */\r\nconst sort_files = (files: Common[\"files\"]) => {\r\n  return files.sort((f1, f2) => {\r\n    const f1_more_generic = f1.include.every((include) => f2.include.includes(include)) && f1.exclude.every((exclude) => f2.exclude.includes(exclude));\r\n    const f2_more_generic = f2.include.every((include) => f1.include.includes(include)) && f2.exclude.every((exclude) => f1.exclude.includes(exclude));\r\n    const same = f1_more_generic && f2_more_generic;\r\n    const different = !f1_more_generic && !f2_more_generic;\r\n    return same || different ? 0 : f1_more_generic ? -1 : 1;\r\n  });\r\n};\r\n\r\nconst to_valid_package_name = (name: string) => {\r\n  return name\r\n    .trim()\r\n    .toLowerCase()\r\n    .replace(/\\s+/g, \"-\")\r\n    .replace(/^[._]/, \"\")\r\n    .replace(/[^a-z0-9~.-]+/g, \"-\");\r\n};\r\n"],"mappings":"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","names":["fs","path","bold","cyan","gray","green","red","prompts","fs","path","create","cwd","options","mkdirp","write_template_files","write_common_files","template","name","dir","dist","copy","manifest","fs","file","dest","path","shared","files","pkg_file","pkg","sort_files","include","condition","matches_condition","new_pkg","merge","sort_keys","to_valid_package_name","target","source","key","target_value","source_value","obj","sorted","f1","f2","f1_more_generic","exclude","f2_more_generic","version","fs","packageManager","getUserPkgManager","main","gray","bold","cyan","red","cwd","opts","prompts","answers","dist","dir","meta_file","title","description","options","path","create","green","i","relative"]}