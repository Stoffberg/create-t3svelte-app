{"version":3,"sources":["../node_modules/.pnpm/gitignore-parser@0.0.2/node_modules/gitignore-parser/lib/index.js","../node_modules/.pnpm/globrex@0.1.2/node_modules/globrex/index.js","../node_modules/.pnpm/globalyzer@0.1.0/node_modules/globalyzer/src/index.js","../node_modules/.pnpm/tiny-glob@0.2.9/node_modules/tiny-glob/sync.js","../src/build.ts"],"sourcesContent":["/**\n * Compile the given `.gitignore` content (not filename!)\n * and return an object with `accepts`, `denies` and `maybe` methods.\n * These methods each accepts a single filename and determines whether\n * they are acceptable or unacceptable according to the `.gitignore` definition.\n *\n *\n * @param  {String} content The `.gitignore` content to compile.\n * @return {Object}         The helper object with methods that operate on the compiled content.\n */\nexports.compile = function (content) {\n  var parsed = exports.parse(content),\n      positives = parsed[0],\n      negatives = parsed[1];\n  return {\n    accepts: function (input) {\n      if (input[0] === '/') input = input.slice(1);\n      return negatives[0].test(input) || !positives[0].test(input);\n    },\n    denies: function (input) {\n      if (input[0] === '/') input = input.slice(1);\n      return !(negatives[0].test(input) || !positives[0].test(input));\n    },\n    maybe: function (input) {\n      if (input[0] === '/') input = input.slice(1);\n      return negatives[1].test(input) || !positives[1].test(input);\n    }\n  };\n};\n\n/**\n * Parse the given `.gitignore` content and return an array\n * containing two further arrays - positives and negatives.\n * Each of these two arrays in turn contains two regexps, one\n * strict and one for 'maybe'.\n *\n * @param  {String} content  The content to parse,\n * @return {Array[]}         The parsed positive and negatives definitions.\n */\nexports.parse = function (content) {\n  return content.split('\\n')\n  .map(function (line) {\n    line = line.trim();\n    return line;\n  })\n  .filter(function (line) {\n    return line && line[0] !== '#';\n  })\n  .reduce(function (lists, line) {\n    var isNegative = line[0] === '!';\n    if (isNegative) {\n      line = line.slice(1);\n    }\n    if (line[0] === '/')\n      line = line.slice(1);\n    if (isNegative) {\n      lists[1].push(line);\n    }\n    else {\n      lists[0].push(line);\n    }\n    return lists;\n  }, [[], []])\n  .map(function (list) {\n    return list\n    .sort()\n    .map(prepareRegexes)\n    .reduce(function (list, prepared) {\n      list[0].push(prepared[0]);\n      list[1].push(prepared[1]);\n      return list;\n    }, [[], [], []]);\n  })\n  .map(function (item) {\n    return [\n      item[0].length > 0 ? new RegExp('^((' + item[0].join(')|(') + '))') : new RegExp('$^'),\n      item[1].length > 0 ? new RegExp('^((' + item[1].join(')|(') + '))') : new RegExp('$^')\n    ]\n  });\n};\n\nfunction prepareRegexes (pattern) {\n  return [\n    // exact regex\n    prepareRegexPattern(pattern),\n    // partial regex\n    preparePartialRegex(pattern)\n  ];\n};\n\nfunction prepareRegexPattern (pattern) {\n  return escapeRegex(pattern).replace('**', '(.+)').replace('*', '([^\\\\/]+)');\n}\n\nfunction preparePartialRegex (pattern) {\n  return pattern\n  .split('/')\n  .map(function (item, index) {\n    if (index)\n      return '([\\\\/]?(' + prepareRegexPattern(item) + '\\\\b|$))';\n    else\n      return '(' + prepareRegexPattern(item) + '\\\\b)';\n  })\n  .join('');\n}\n\nfunction escapeRegex (pattern) {\n  return pattern.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n","const isWin = process.platform === 'win32';\nconst SEP = isWin ? `\\\\\\\\+` : `\\\\/`;\nconst SEP_ESC = isWin ? `\\\\\\\\` : `/`;\nconst GLOBSTAR = `((?:[^/]*(?:/|$))*)`;\nconst WILDCARD = `([^/]*)`;\nconst GLOBSTAR_SEGMENT = `((?:[^${SEP_ESC}]*(?:${SEP_ESC}|$))*)`;\nconst WILDCARD_SEGMENT = `([^${SEP_ESC}]*)`;\n\n/**\n * Convert any glob pattern to a JavaScript Regexp object\n * @param {String} glob Glob pattern to convert\n * @param {Object} opts Configuration object\n * @param {Boolean} [opts.extended=false] Support advanced ext globbing\n * @param {Boolean} [opts.globstar=false] Support globstar\n * @param {Boolean} [opts.strict=true] be laissez faire about mutiple slashes\n * @param {Boolean} [opts.filepath=''] Parse as filepath for extra path related features\n * @param {String} [opts.flags=''] RegExp globs\n * @returns {Object} converted object with string, segments and RegExp object\n */\nfunction globrex(glob, {extended = false, globstar = false, strict = false, filepath = false, flags = ''} = {}) {\n    let regex = '';\n    let segment = '';\n    let path = { regex: '', segments: [] };\n\n    // If we are doing extended matching, this boolean is true when we are inside\n    // a group (eg {*.html,*.js}), and false otherwise.\n    let inGroup = false;\n    let inRange = false;\n\n    // extglob stack. Keep track of scope\n    const ext = [];\n\n    // Helper function to build string and segments\n    function add(str, {split, last, only}={}) {\n        if (only !== 'path') regex += str;\n        if (filepath && only !== 'regex') {\n            path.regex += (str === '\\\\/' ? SEP : str);\n            if (split) {\n                if (last) segment += str;\n                if (segment !== '') {\n                    if (!flags.includes('g')) segment = `^${segment}$`; // change it 'includes'\n                    path.segments.push(new RegExp(segment, flags));\n                }\n                segment = '';\n            } else {\n                segment += str;\n            }\n        }\n    }\n\n    let c, n;\n    for (let i = 0; i < glob.length; i++) {\n        c = glob[i];\n        n = glob[i + 1];\n\n        if (['\\\\', '$', '^', '.', '='].includes(c)) {\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '/') {\n            add(`\\\\${c}`, {split: true});\n            if (n === '/' && !strict) regex += '?';\n            continue;\n        }\n\n        if (c === '(') {\n            if (ext.length) {\n                add(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === ')') {\n            if (ext.length) {\n                add(c);\n                let type = ext.pop();\n                if (type === '@') {\n                    add('{1}');\n                } else if (type === '!') {\n                    add('([^\\/]*)');\n                } else {\n                    add(type);\n                }\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n        \n        if (c === '|') {\n            if (ext.length) {\n                add(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '+') {\n            if (n === '(' && extended) {\n                ext.push(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '@' && extended) {\n            if (n === '(') {\n                ext.push(c);\n                continue;\n            }\n        }\n\n        if (c === '!') {\n            if (extended) {\n                if (inRange) {\n                    add('^');\n                    continue\n                }\n                if (n === '(') {\n                    ext.push(c);\n                    add('(?!');\n                    i++;\n                    continue;\n                }\n                add(`\\\\${c}`);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '?') {\n            if (extended) {\n                if (n === '(') {\n                    ext.push(c);\n                } else {\n                    add('.');\n                }\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '[') {\n            if (inRange && n === ':') {\n                i++; // skip [\n                let value = '';\n                while(glob[++i] !== ':') value += glob[i];\n                if (value === 'alnum') add('(\\\\w|\\\\d)');\n                else if (value === 'space') add('\\\\s');\n                else if (value === 'digit') add('\\\\d');\n                i++; // skip last ]\n                continue;\n            }\n            if (extended) {\n                inRange = true;\n                add(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === ']') {\n            if (extended) {\n                inRange = false;\n                add(c);\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '{') {\n            if (extended) {\n                inGroup = true;\n                add('(');\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '}') {\n            if (extended) {\n                inGroup = false;\n                add(')');\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === ',') {\n            if (inGroup) {\n                add('|');\n                continue;\n            }\n            add(`\\\\${c}`);\n            continue;\n        }\n\n        if (c === '*') {\n            if (n === '(' && extended) {\n                ext.push(c);\n                continue;\n            }\n            // Move over all consecutive \"*\"'s.\n            // Also store the previous and next characters\n            let prevChar = glob[i - 1];\n            let starCount = 1;\n            while (glob[i + 1] === '*') {\n                starCount++;\n                i++;\n            }\n            let nextChar = glob[i + 1];\n            if (!globstar) {\n                // globstar is disabled, so treat any number of \"*\" as one\n                add('.*');\n            } else {\n                // globstar is enabled, so determine if this is a globstar segment\n                let isGlobstar =\n                    starCount > 1 && // multiple \"*\"'s\n                    (prevChar === '/' || prevChar === undefined) && // from the start of the segment\n                    (nextChar === '/' || nextChar === undefined); // to the end of the segment\n                if (isGlobstar) {\n                    // it's a globstar, so match zero or more path segments\n                    add(GLOBSTAR, {only:'regex'});\n                    add(GLOBSTAR_SEGMENT, {only:'path', last:true, split:true});\n                    i++; // move over the \"/\"\n                } else {\n                    // it's not a globstar, so only match one path segment\n                    add(WILDCARD, {only:'regex'});\n                    add(WILDCARD_SEGMENT, {only:'path'});\n                }\n            }\n            continue;\n        }\n\n        add(c);\n    }\n\n\n    // When regexp 'g' flag is specified don't\n    // constrain the regular expression with ^ & $\n    if (!flags.includes('g')) {\n        regex = `^${regex}$`;\n        segment = `^${segment}$`;\n        if (filepath) path.regex = `^${path.regex}$`;\n    }\n\n    const result = {regex: new RegExp(regex, flags)};\n\n    // Push the last segment\n    if (filepath) {\n        path.segments.push(new RegExp(segment, flags));\n        path.regex = new RegExp(path.regex, flags);\n        path.globstar = new RegExp(!flags.includes('g') ? `^${GLOBSTAR_SEGMENT}$` : GLOBSTAR_SEGMENT, flags);\n        result.path = path;\n    }\n\n    return result;\n}\n\nmodule.exports = globrex;\n","'use strict';\n\nconst os = require('os');\nconst path = require('path');\nconst isWin = os.platform() === 'win32';\n\nconst CHARS = { '{': '}', '(': ')', '[': ']'};\nconst STRICT = /\\\\(.)|(^!|\\*|[\\].+)]\\?|\\[[^\\\\\\]]+\\]|\\{[^\\\\}]+\\}|\\(\\?[:!=][^\\\\)]+\\)|\\([^|]+\\|[^\\\\)]+\\)|(\\\\).|([@?!+*]\\(.*\\)))/;\nconst RELAXED = /\\\\(.)|(^!|[*?{}()[\\]]|\\(\\?)/;\n\n/**\n * Detect if a string cointains glob\n * @param {String} str Input string\n * @param {Object} [options] Configuration object\n * @param {Boolean} [options.strict=true] Use relaxed regex if true\n * @returns {Boolean} true if string contains glob\n */\nfunction isglob(str, { strict = true } = {}) {\n  if (str === '') return false;\n  let match, rgx = strict ? STRICT : RELAXED;\n\n  while ((match = rgx.exec(str))) {\n    if (match[2]) return true;\n    let idx = match.index + match[0].length;\n\n    // if an open bracket/brace/paren is escaped,\n    // set the index to the next closing character\n    let open = match[1];\n    let close = open ? CHARS[open] : null;\n    if (open && close) {\n      let n = str.indexOf(close, idx);\n      if (n !== -1)  idx = n + 1;\n    }\n\n    str = str.slice(idx);\n  }\n  return false;\n}\n\n\n/**\n * Find the static part of a glob-path,\n * split path and return path part\n * @param {String} str Path/glob string\n * @returns {String} static path section of glob\n */\nfunction parent(str, { strict = false } = {}) {\n  if (isWin && str.includes('/'))\n    str = str.split('\\\\').join('/');\n\n\t// special case for strings ending in enclosure containing path separator\n\tif (/[\\{\\[].*[\\/]*.*[\\}\\]]$/.test(str)) str += '/';\n\n\t// preserves full path in case of trailing path separator\n\tstr += 'a';\n\n\tdo {str = path.dirname(str)}\n\twhile (isglob(str, {strict}) || /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/.test(str));\n\n\t// remove escape chars and return result\n\treturn str.replace(/\\\\([\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g, '$1');\n};\n\n\n/**\n * Parse a glob path, and split it by static/glob part\n * @param {String} pattern String path\n * @param {Object} [opts] Options\n * @param {Object} [opts.strict=false] Use strict parsing\n * @returns {Object} object with parsed path\n */\nfunction globalyzer(pattern, opts = {}) {\n    let base = parent(pattern, opts);\n    let isGlob = isglob(pattern, opts);\n    let glob;\n\n    if (base != '.') {\n        glob = pattern.substr(base.length);\n        if (glob.startsWith('/')) glob = glob.substr(1);\n    } else {\n        glob = pattern;\n    }\n\n    if (!isGlob) {\n        base = path.dirname(pattern);\n        glob = base !== '.' ? pattern.substr(base.length) : pattern;\n    }\n\n    if (glob.startsWith('./')) glob = glob.substr(2);\n    if (glob.startsWith('/')) glob = glob.substr(1);\n\n    return { base, glob, isGlob };\n}\n\n\nmodule.exports = globalyzer;\n","const fs = require('fs');\nconst globrex = require('globrex');\nconst globalyzer = require('globalyzer');\nconst { join, resolve, relative } = require('path');\nconst isHidden = /(^|[\\\\\\/])\\.[^\\\\\\/\\.]/g;\n\nlet CACHE = {};\n\nfunction walk(output, prefix, lexer, opts, dirname='', level=0) {\n  const rgx = lexer.segments[level];\n  const dir = resolve(opts.cwd, prefix, dirname);\n  const files = fs.readdirSync(dir);\n  const { dot, filesOnly } = opts;\n\n  let i=0, len=files.length, file;\n  let fullpath, relpath, stats, isMatch;\n\n  for (; i < len; i++) {\n    fullpath = join(dir, file=files[i]);\n    relpath = dirname ? join(dirname, file) : file;\n    if (!dot && isHidden.test(relpath)) continue;\n    isMatch = lexer.regex.test(relpath);\n\n    if ((stats=CACHE[relpath]) === void 0) {\n      CACHE[relpath] = stats = fs.lstatSync(fullpath);\n    }\n\n    if (!stats.isDirectory()) {\n      isMatch && output.push(relative(opts.cwd, fullpath));\n      continue;\n    }\n\n    if (rgx && !rgx.test(file)) continue;\n    !filesOnly && isMatch && output.push(join(prefix, relpath));\n\n    walk(output, prefix, lexer, opts, relpath, rgx && rgx.toString() !== lexer.globstar && level + 1);\n  }\n}\n\n/**\n * Find files using bash-like globbing.\n * All paths are normalized compared to node-glob.\n * @param {String} str Glob string\n * @param {String} [options.cwd='.'] Current working directory\n * @param {Boolean} [options.dot=false] Include dotfile matches\n * @param {Boolean} [options.absolute=false] Return absolute paths\n * @param {Boolean} [options.filesOnly=false] Do not include folders if true\n * @param {Boolean} [options.flush=false] Reset cache object\n * @returns {Array} array containing matching files\n */\nmodule.exports = function (str, opts={}) {\n  if (!str) return [];\n\n  let glob = globalyzer(str);\n\n  opts.cwd = opts.cwd || '.';\n\n  if (!glob.isGlob) {\n    try {\n      let resolved = resolve(opts.cwd, str);\n      let dirent = fs.statSync(resolved);\n      if (opts.filesOnly && !dirent.isFile()) return [];\n\n      return opts.absolute ? [resolved] : [str];\n    } catch (err) {\n      if (err.code != 'ENOENT') throw err;\n\n      return [];\n    }\n  }\n\n  if (opts.flush) CACHE = {};\n\n  let matches = [];\n  const { path } = globrex(glob.glob, { filepath:true, globstar:true, extended:true });\n\n  path.globstar = path.globstar.toString();\n  walk(matches, glob.base, path, opts, '.', 0);\n\n  return opts.absolute ? matches.map(x => resolve(opts.cwd, x)) : matches;\n};\n","import fs from \"fs\";\r\nimport path from \"path\";\r\nimport parser from \"gitignore-parser\";\r\nimport glob from \"tiny-glob/sync\";\r\n\r\nimport { mkdirp, rimraf } from \"src/utils\";\r\nimport type { Common, Condition, File } from \"src/types\";\r\n\r\nconst strip_jsdoc = (content: string) => {\r\n  return content.replace(/\\/\\*\\*\\*\\//g, \"\").replace(/\\/\\*\\*([\\s\\S]+?)(@[\\s\\S]+?)?\\*\\/([\\s\\n]+)/g, (_match, description, _tags, whitespace) => {\r\n    if (/^\\s+(\\*\\s*)?$/.test(description)) {\r\n      return \"\";\r\n    }\r\n\r\n    return `/**${description.replace(/\\*\\ $/, \"\")}*/${whitespace}`;\r\n  });\r\n};\r\n\r\nconst generate_templates = async (shared: Set<string>) => {\r\n  const templates = fs.readdirSync(\"templates\");\r\n\r\n  for (const template of templates) {\r\n    if (template[0] === \".\") continue;\r\n\r\n    const dir = `dist/templates/${template}`;\r\n    const assets = `${dir}/assets`;\r\n    mkdirp(assets);\r\n\r\n    const cwd = path.resolve(\"templates\", template);\r\n\r\n    const gitignore_file = path.join(cwd, \".gitignore\");\r\n    if (!fs.existsSync(gitignore_file)) {\r\n      throw new Error(`\"${template}\" template must have a .gitignore file`);\r\n    }\r\n\r\n    const gitignore = parser.compile(fs.readFileSync(gitignore_file, \"utf-8\"));\r\n\r\n    const ignore_file = path.join(cwd, \".ignore\");\r\n    if (!fs.existsSync(ignore_file)) throw new Error(\"Template must have a .ignore file\");\r\n    const ignore = parser.compile(fs.readFileSync(ignore_file, \"utf-8\"));\r\n\r\n    const meta_file = path.join(cwd, \".meta.json\");\r\n    if (!fs.existsSync(meta_file)) throw new Error(\"Template must have a .meta.json file\");\r\n\r\n    const typescript: File[] = [];\r\n\r\n    glob(\"**/*\", { cwd, filesOnly: true, dot: true }).forEach((name) => {\r\n      // the package.template.json thing is a bit annoying — basically we want\r\n      // to be able to develop and deploy the app from here, but have a different\r\n      // package.json in newly created projects (based on package.template.json)\r\n      if (name === \"package.template.json\") {\r\n        let contents = fs.readFileSync(path.join(cwd, name), \"utf8\");\r\n        // TODO package-specific versions\r\n        contents = contents.replace(/workspace:\\*/g, \"next\");\r\n        fs.writeFileSync(`${dir}/package.json`, contents);\r\n        return;\r\n      }\r\n\r\n      // ignore files that are written conditionally\r\n      if (shared.has(name)) return;\r\n\r\n      // ignore contents of .gitignore or .ignore\r\n      if (!gitignore.accepts(name) || !ignore.accepts(name) || name === \".ignore\") return;\r\n\r\n      if (/\\.(ts|svelte)$/.test(name)) {\r\n        const contents = fs.readFileSync(path.join(cwd, name), \"utf8\");\r\n\r\n        if (name.endsWith(\".d.ts\")) {\r\n          typescript.push({ name, contents });\r\n        } else {\r\n          typescript.push({\r\n            name,\r\n            contents: strip_jsdoc(contents),\r\n          });\r\n        }\r\n      } else {\r\n        const dest = path.join(assets, name.replace(/^\\./, \"DOT-\"));\r\n        mkdirp(path.dirname(dest));\r\n        fs.copyFileSync(path.join(cwd, name), dest);\r\n      }\r\n    });\r\n\r\n    fs.copyFileSync(meta_file, `${dir}/meta.json`);\r\n    fs.writeFileSync(`${dir}/files.types=typescript.json`, JSON.stringify(typescript, null, \"\\t\"));\r\n  }\r\n};\r\n\r\nconst generate_shared = async () => {\r\n  const cwd = path.resolve(\"shared\");\r\n\r\n  const shared = new Set<string>();\r\n  const files: Common[\"files\"] = [];\r\n\r\n  glob(\"**/*\", { cwd, filesOnly: true, dot: true }).forEach((file) => {\r\n    const contents = fs.readFileSync(path.join(cwd, file), \"utf8\");\r\n\r\n    const include: Condition[] = [];\r\n    const exclude: Condition[] = [];\r\n\r\n    let name = file;\r\n\r\n    if (file.startsWith(\"+\") || file.startsWith(\"-\")) {\r\n      const [conditions, ...rest] = file.split(path.sep);\r\n\r\n      const pattern = /([+-])([a-z]+)/g;\r\n      let match;\r\n      while ((match = pattern.exec(conditions!))) {\r\n        const set = match[1] === \"+\" ? include : exclude;\r\n        set.push(match[2] as Condition);\r\n      }\r\n\r\n      name = rest.join(\"/\");\r\n    }\r\n\r\n    shared.add(name);\r\n    files.push({ name, include, exclude, contents });\r\n  });\r\n\r\n  files.sort((a, b) => a.include.length + a.exclude.length - (b.include.length + b.exclude.length));\r\n\r\n  fs.writeFileSync(\"dist/templates/shared.json\", JSON.stringify({ files }, null, \"\\t\"));\r\n\r\n  shared.delete(\"package.json\");\r\n  return shared;\r\n};\r\n\r\nconst main = async () => {\r\n  rimraf(\"dist/templates\");\r\n  mkdirp(\"dist/templates\");\r\n\r\n  const shared = await generate_shared();\r\n  await generate_templates(shared);\r\n};\r\n\r\nmain();\r\n"],"mappings":"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","names":["require_lib","__commonJSMin","exports","content","parsed","positives","negatives","input","line","lists","isNegative","list","prepareRegexes","prepared","item","pattern","prepareRegexPattern","preparePartialRegex","escapeRegex","index","require_globrex","__commonJSMin","exports","module","isWin","SEP","SEP_ESC","GLOBSTAR","WILDCARD","GLOBSTAR_SEGMENT","WILDCARD_SEGMENT","globrex","glob","extended","globstar","strict","filepath","flags","regex","segment","path","inGroup","inRange","ext","add","str","split","last","only","c","n","i","type","value","prevChar","starCount","nextChar","result","require_src","__commonJSMin","exports","module","os","path","isWin","CHARS","STRICT","RELAXED","isglob","str","strict","match","rgx","idx","open","close","n","parent","globalyzer","pattern","opts","base","isGlob","glob","require_sync","__commonJSMin","exports","module","fs","globrex","globalyzer","join","resolve","relative","isHidden","CACHE","walk","output","prefix","lexer","opts","dirname","level","rgx","dir","files","dot","filesOnly","i","len","file","fullpath","relpath","stats","isMatch","str","glob","resolved","dirent","err","matches","path","x","import_gitignore_parser","import_sync","fs","path","strip_jsdoc","content","_match","description","_tags","whitespace","generate_templates","shared","templates","fs","template","dir","assets","mkdirp","cwd","path","gitignore_file","gitignore","parser","ignore_file","ignore","meta_file","typescript","glob","name","contents","dest","generate_shared","files","file","include","exclude","conditions","rest","pattern","match","a","b","main","rimraf"]}